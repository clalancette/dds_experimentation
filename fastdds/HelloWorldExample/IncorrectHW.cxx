// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file IncorrectHW.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "IncorrectHW.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

IncorrectHW::IncorrectHW()
{
    // m_id com.eprosima.idl.parser.typecode.StringTypeCode@6121c9d6
    m_id ="";
    // m_message com.eprosima.idl.parser.typecode.StringTypeCode@eafc191
    m_message ="";

}

IncorrectHW::~IncorrectHW()
{


}

IncorrectHW::IncorrectHW(
        const IncorrectHW& x)
{
    m_id = x.m_id;
    m_message = x.m_message;
}

IncorrectHW::IncorrectHW(
        IncorrectHW&& x)
{
    m_id = std::move(x.m_id);
    m_message = std::move(x.m_message);
}

IncorrectHW& IncorrectHW::operator =(
        const IncorrectHW& x)
{

    m_id = x.m_id;
    m_message = x.m_message;

    return *this;
}

IncorrectHW& IncorrectHW::operator =(
        IncorrectHW&& x)
{

    m_id = std::move(x.m_id);
    m_message = std::move(x.m_message);

    return *this;
}

bool IncorrectHW::operator ==(
        const IncorrectHW& x) const
{

    return (m_id == x.m_id && m_message == x.m_message);
}

bool IncorrectHW::operator !=(
        const IncorrectHW& x) const
{
    return !(*this == x);
}

size_t IncorrectHW::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;


    return current_alignment - initial_alignment;
}

size_t IncorrectHW::getCdrSerializedSize(
        const IncorrectHW& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.id().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.message().size() + 1;


    return current_alignment - initial_alignment;
}

void IncorrectHW::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_id;
    scdr << m_message;

}

void IncorrectHW::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_id;
    dcdr >> m_message;
}

/*!
 * @brief This function copies the value in member id
 * @param _id New value to be copied in member id
 */
void IncorrectHW::id(
        const std::string& _id)
{
    m_id = _id;
}

/*!
 * @brief This function moves the value in member id
 * @param _id New value to be moved in member id
 */
void IncorrectHW::id(
        std::string&& _id)
{
    m_id = std::move(_id);
}

/*!
 * @brief This function returns a constant reference to member id
 * @return Constant reference to member id
 */
const std::string& IncorrectHW::id() const
{
    return m_id;
}

/*!
 * @brief This function returns a reference to member id
 * @return Reference to member id
 */
std::string& IncorrectHW::id()
{
    return m_id;
}
/*!
 * @brief This function copies the value in member message
 * @param _message New value to be copied in member message
 */
void IncorrectHW::message(
        const std::string& _message)
{
    m_message = _message;
}

/*!
 * @brief This function moves the value in member message
 * @param _message New value to be moved in member message
 */
void IncorrectHW::message(
        std::string&& _message)
{
    m_message = std::move(_message);
}

/*!
 * @brief This function returns a constant reference to member message
 * @return Constant reference to member message
 */
const std::string& IncorrectHW::message() const
{
    return m_message;
}

/*!
 * @brief This function returns a reference to member message
 * @return Reference to member message
 */
std::string& IncorrectHW::message()
{
    return m_message;
}

size_t IncorrectHW::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;





    return current_align;
}

bool IncorrectHW::isKeyDefined()
{
    return false;
}

void IncorrectHW::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
      
}
